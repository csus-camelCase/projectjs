<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Candidate Search</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <div class="wrapper job-search">
        <h2>Search for Candidates</h2>

        <!-- Search input box -->
        <div class="input-box">
            <input type="text" id="searchInput" placeholder="Search by candidate name or preferences"
                onkeyup="searchCandidates()">
        </div>

        <!-- Form to handle selections -->
        <form id="candidatesForm">
            <!-- Table to display candidate details -->
            <table id="candidatesTable">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Preferences</th>
                        <th>Email</th>
                        <th>First Login</th>
                        <th>Last Login</th>
                    </tr>
                </thead>
                <tbody>
                   
                    <% users.forEach(user=> { %>
                        
                        <tr>
                            <td>
                                <input type="checkbox" name="selectedCandidates" value="<%= user._id %>">
                            </td>
                            <td>
                                <%= user.first_name %>
                            </td>
                            <td>
                                <%= user.last_name %>
                            </td>
                            <td style="max-width: 150px; overflow-x: auto; white-space: nowrap;">
                                <% if (user.preferences && user.preferences.length > 0) { %>
                                    <%= user.preferences.join(', ') %>
                                <% } else { %>
                                    <em>None</em>
                                <% } %>
                            </td>
                            <td>
                                <%= user.email %>
                            </td>
                            <td>
                                <%= user.formattedCreatedAt %>
                            </td>
                            <td>
                                <%= user.formattedLastLogin %>
                            </td>
                        </tr>
                        <% }) %>
                </tbody>
            </table>

            <div style="display: flex; justify-content: center; gap: 10px; text-align: center; margin-top: 20px;">
                <button type="button" id="submitButton" class="btn" style="padding: 10px;">Send Emails to Candidates</button>
                <button type="button" id="promoteButton" class="btn" style="padding: 10px;">Promote Selected to Admin</button>
                <button type="button" id="deleteButton" class="btn" style="padding: 10px;">Delete Selected Accounts</button>
                <a href="/admin_dashboard.html" class="btn" style="padding: 10px;">Back to Dashboard</a>
            </div>
    </div>

    <script>
         
        // Function to filter candidates based on search input
        let debounceTimer;

        document.getElementById('searchInput').addEventListener('input', () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(searchCandidates, 300); // Wait 300ms before searching
        });

        async function searchCandidates() {
            const query = document.getElementById('searchInput').value.trim();

            if (query.length === 0) {
                window.location.reload(); // Reload full candidate list when input is cleared
                return;
            }

            try {
                const response = await fetch(`/search-candidates?query=${encodeURIComponent(query)}`);
                const candidates = await response.json();
                updateCandidatesTable(candidates);
            } catch (error) {
                console.error('Error fetching candidates:', error);
            }
        }

        function updateCandidatesTable(candidates) {
            const tbody = document.querySelector("#candidatesTable tbody");
            tbody.innerHTML = ""; // Clear existing rows

            candidates.forEach(user => {
                const row = document.createElement("tr");
                const prefs = user.preferences?.join(', ') || 'None';

                row.innerHTML = `
            <td><input type="checkbox" name="selectedCandidates" value="${user._id}"></td>
            <td>${user.first_name}</td>
            <td>${user.last_name}</td>
            <td style="max-width: 150px; overflow-x: auto; white-space: nowrap;">${prefs}</td>
            <td>${user.email}</td>
            <td>${user.formattedCreatedAt}</td>
            <td>${user.formattedLastLogin}</td>
        `;

                tbody.appendChild(row);
            });
        }


        // Handle form submission
        document.getElementById('submitButton').addEventListener('click', async () => {
            const checkboxes = document.querySelectorAll('input[name="selectedCandidates"]:checked');
            const selectedCandidates = Array.from(checkboxes).map(cb => cb.value);

            // Send selected candidates to the server
            try {
                const response = await fetch('/process-selections', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedCandidates })
                });

                if (response.status === 400) {
                    const result = await response.json();
                    alert(result.message); // Show popup if no candidates are selected
                } else if (response.ok) {
                    window.location.href = response.url; // Redirect to send-emails.html
                }
            } catch (error) {
                console.error('Error submitting candidates:', error);
                alert('No candidates selected. Please select at least one candidate.');
            }
        });

        // Handle deletion
        document.getElementById('deleteButton').addEventListener('click', async () => {
            const checkboxes = document.querySelectorAll('input[name="selectedCandidates"]:checked');
            const selectedCandidates = Array.from(checkboxes).map(cb => cb.value);

            if (selectedCandidates.length === 0) {
                alert("Please select at least one candidate to delete.");
                return;
            }

            const confirmed = confirm("Are you sure you want to delete the selected account(s)? This action cannot be undone.");

            if (!confirmed) return;

            try {
                const response = await fetch('/delete-candidates', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedCandidates })
                });

                if (response.ok) {
                    alert("Selected accounts deleted successfully.");
                    location.reload();
                } else {
                    alert("Failed to delete accounts.");
                }
            } catch (error) {
                console.error('Error deleting candidates:', error);
                alert("An error occurred while trying to delete the selected accounts.");
            }
        });
        // Handle Promotion
        /*document.getElementById('promoteButton').addEventListener('click', async () => {
        const checkboxes = document.querySelectorAll('input[name="selectedCandidates"]:checked');
        const selectedCandidates = Array.from(checkboxes).map(cb => cb.value);

        if (selectedCandidates.length === 0) {
            alert("Please select at least one candidate to promote.");
            return;
        }

        const confirmed = confirm("Are you sure you want to promote the selected account(s) to admin?");

        if (!confirmed) return;

        try {
            const response = await fetch('/promote-candidates', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ selectedCandidates })
            });

            if (response.ok) {
                alert("Selected accounts promoted to admin successfully.");
                location.reload();
            } else {
                alert("Failed to promote accounts.");
            }
        } catch (error) {
            console.error('Error promoting candidates:', error);
            alert("An error occurred while trying to promote the selected accounts.");
        }

        });*/
        //Handle Promotion
        document.getElementById('promoteButton').addEventListener('click', promoteSelectedAdmins);
        async function promoteSelectedAdmins() {
            const checkboxes = document.querySelectorAll('input[name="selectedCandidates"]:checked');
            const selectedCandidateIds = Array.from(checkboxes).map(cb => cb.value);

            if (selectedCandidateIds.length === 0) {
                alert("Please select at least one candidate to promote.");
                return;
            }

            const confirmed = confirm(`Are you sure you want to promote ${selectedCandidateIds.length} account(s) to admin?`);

            if (!confirmed) return;

            try {
                for (const userId of selectedCandidateIds) {
                    const updateResponse = await fetch(`/api/users/${userId}/role`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ role: 'admin', isAdmin: true })
                    });

                    if (!updateResponse.ok) {
                        const error = await updateResponse.json();
                        alert("Failed to promote a user: " + (error.message || 'Unknown error'));
                        return;
                    }
                }

                alert(`Successfully promoted ${selectedCandidateIds.length} account(s) to admin!`);
                location.reload();

            } catch (error) {
                console.error("Error promoting candidates:", error);
                alert("Something went wrong while promoting.");
            }
        }    
    </script>
</body>

</html>